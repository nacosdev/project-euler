from collections import defaultdict
import math
'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''
#def p12():
def is_prime(num):
    isPrime = False
    if num < 3 or num % 2 == 0:
        isPrime = (num == 2)
    else:
        isPrime = all(num % i != 0 for i in range(3, int(num**0.5 + 2), 2))
    return isPrime

def prime_sieve(n):
    sieve = [True] * (n//2)
    for i in range(3, int(math.sqrt(n))+1, 2):
        if sieve[i//2]:
            sieve[i*i//2::i] = [False] * ((n-i*i-1)//(2*i)+1)
    return [2] + [2*i+1 for i in range(1, n//2) if sieve[i]]

def number_of_divisors(n):
    primes = prime_sieve(1000)
    divisors = defaultdict(int)
    cant = 2
    last = False
    while not last:
        for prime in primes:
            if n % prime is 0:
                print(n, prime)
                n = int(n / prime)
                divisors[str(prime)] += 1
                break
        if is_prime(n):
            last = True
    print(divisors)
    for k in divisors:
        cant += divisors[k]*2
    return cant

print(number_of_divisors(90))

#print(p12())